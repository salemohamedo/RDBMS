package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public JoinPredicate myJPred;
    public DbIterator myChild1;
    public Tuple outerTuple;
    public DbIterator myChild2;

    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        myJPred = p;
        outerTuple = null;
        myChild1 = child1;
        myChild2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return myJPred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return myChild1.getTupleDesc().getFieldName(myJPred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return myChild2.getTupleDesc().getFieldName(myJPred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(myChild1.getTupleDesc(), myChild2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        myChild1.open();
        super.open();
        myChild2.open();
        super.open();
    }

    public void close() {
        myChild1.close();
        super.close();
        myChild2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        myChild1.rewind();
        myChild2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(outerTuple == null){
            if(!myChild1.hasNext()){
                return null;
            }
            else outerTuple = myChild1.next();
        }
        while(outerTuple != null) {
            while(myChild2.hasNext()) {
                Tuple innerTuple = myChild2.next();
                if (myJPred.filter(outerTuple, innerTuple)) {
                    Tuple mergedTuple = new Tuple(TupleDesc.merge(outerTuple.getTupleDesc(), innerTuple.getTupleDesc()));
                    //combine tuples into one tuple
                    for(int i = 0; i < outerTuple.getTupleDesc().numFields(); i++){
                        mergedTuple.setField(i,outerTuple.getField(i));
                    }
                    for(int j = 0; j < innerTuple.getTupleDesc().numFields(); j++){
                        mergedTuple.setField(j + outerTuple.getTupleDesc().numFields(),innerTuple.getField(j));
                    }
                    return mergedTuple;
                }
            }
            //restart inner tuple iterator
            myChild2.rewind();

            if(myChild1.hasNext()){
                outerTuple = myChild1.next();
            }
            else{
                outerTuple = null;
            }
        }
        return null;
    }


    @Override
    public DbIterator[] getChildren() {
        DbIterator[] dbIterator = new DbIterator[2];
        dbIterator[0] = myChild1;
        dbIterator[1] = myChild2;
        return dbIterator;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        myChild1 = children[0];
        myChild2 = children[1];
    }

}
